<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rockyStop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
/*
/----Estado de player-----
*stop = parado
*move = moviendo
*hurt = daño
*phantom = tarnsparente
*ok = recuperado
*/

image_speed = 0.1;

//life = 3;
dir = 3
statePlayer = "stop";
movePlayer = true;
chargerPlayer = true;
moveSpeed = 3;
moveHor = 0;
//shader_set( shader0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Se recupera despues del daño
statePlayer = "ok";
image_alpha = 1;
//image_index = 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
//if keyboard_check( vk_left) x -=dir;
//else if keyboard_check( vk_right) x +=dir;

if (movePlayer)
{
    //moviminento horizontal
    key_right = keyboard_check( vk_right);
    key_left = -keyboard_check( vk_left);
    move = key_left + key_right;
    moveHor = move * moveSpeed;
    
    hspeed = +moveHor;
    //cambio de sprite
    if (moveHor !=0){
        if ( chargerPlayer == false){
            sprite_index = spr_rockyMove;
        }
        else{ sprite_index = spr_rockyCharger;}
        
        //Espejado horizontal
        if move == 1 image_xscale = 1;
        else image_xscale = -1;
    }
    else{
        if ( chargerPlayer == false){
            sprite_index = spr_rockyStop;
        }
        else { sprite_index = spr_rockyStopCharger;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot
//patear
if (keyboard_check( vk_space)  &amp;&amp; o_turtleBall.stateBall == "stop"){
    o_turtleBall.stateBall = "move";
    chargerPlayer = false;
    //sound_play( SHOOT);
    if !audio_is_playing( SHOOT) audio_play_sound( SHOOT,1,0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State collision HURT
//Cambia estado a phantom cuando recibe daño,
//activa alarma[0] y reduce transparencia.
if (statePlayer == "hurt"){
    statePlayer = "phantom";
    image_alpha = 0.5;
    alarm[0] = room_speed * 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_solido">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detiene movimiento horizontal
hspeed = 0;
sprite_index = spr_rockyStop;
//move_contact_solid ( 270, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_dino">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resta vida
/*
Cambia estado a hurt(daño) solo si su estado
actual es diferente de phantom.
*/
if ( statePlayer != "phantom"){
    statePlayer = "hurt";//daño
    global.life--;
    //image_index = spr_rockyShock;
    instance_create(x,y, o_rockyShock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_turtleBall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cambio de estados en turtleBall y chargerPlayer
chargerPlayer = true;
o_turtleBall.stateBall = "stop";

/*
Es necesario que la varable dirY se cambie a 4
esto permite que al momento de patear el
ballon nuevamente, este se dirija hacia arriba
*/
o_turtleBall.dirY = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
